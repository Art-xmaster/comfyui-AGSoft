"""
AGSoft_Image_Rotate.py

–ù–æ–¥–∞ –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ ComfyUI.

–ü–æ–¥–¥–µ—Ä–∂–∫–∞:
- –£–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ (—à–∞–≥ 1¬∞)
- –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏: 90, 180, 270, 360
- –ú–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏: nearest, bilinear (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å torch.Tensor)
- –¶–≤–µ—Ç —Ñ–æ–Ω–∞: transparent, black, white, gray, red, green, blue, cyan, yellow
- Expand: —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Ö–æ–ª—Å—Ç –∏–ª–∏ –Ω–µ—Ç
- Batch processing (B, H, W, C)

–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ComfyUI 0.3.62+, PyTorch/torchvision (–ª—é–±–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"""

import torch
import torchvision.transforms.functional as TF
from typing import Tuple, Union, List

# –¢–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–µ–∂–∏–º—ã –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –¥–ª—è torch.Tensor
INTERPOLATION_MODES = {
    "nearest": TF.InterpolationMode.NEAREST,
    "bilinear": TF.InterpolationMode.BILINEAR,
}

# –¶–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º RGB [0.0, 1.0]
BACKGROUND_COLORS = {
    "transparent": None,
    "black": [0.0, 0.0, 0.0],
    "white": [1.0, 1.0, 1.0],
    "gray": [0.5, 0.5, 0.5],
    "red": [1.0, 0.0, 0.0],
    "green": [0.0, 1.0, 0.0],
    "blue": [0.0, 0.0, 1.0],
    "cyan": [0.0, 1.0, 1.0],      # –≥–æ–ª—É–±–æ–π
    "yellow": [1.0, 1.0, 0.0],
}


class AGSoft_Image_Rotate:
    @classmethod
    def INPUT_TYPES(cls) -> dict:
        return {
            "required": {
                "image": ("IMAGE",),
                "angle_degrees": (
                    "INT",
                    {
                        "default": 0,
                        "min": -360,
                        "max": 360,
                        "step": 1,
                        "tooltip": "–£–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö. –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ ‚Äî –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏.",
                    },
                ),
                "interpolation": (
                    ["nearest", "bilinear"],
                    {
                        "default": "bilinear",
                        "tooltip": "–¢–æ–ª—å–∫–æ —ç—Ç–∏ –¥–≤–∞ –º–µ—Ç–æ–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –¥–ª—è —Ç–µ–Ω–∑–æ—Ä–æ–≤ –≤ ComfyUI.",
                    },
                ),
                "background_color": (
                    [
                        "transparent",
                        "black", "white", "gray",
                        "red", "green", "blue",
                        "cyan", "yellow"
                    ],
                    {
                        "default": "transparent",
                        "tooltip": "–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π. '–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π' –¥–æ–±–∞–≤–ª—è–µ—Ç –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.",
                    },
                ),
                "expand": (
                    "BOOLEAN",
                    {
                        "default": False,
                        "tooltip": "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ ‚Äî —Ö–æ–ª—Å—Ç —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è, —á—Ç–æ–±—ã –≤–º–µ—Å—Ç–∏—Ç—å –≤—Å—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏.",
                    },
                ),
            },
            "optional": {
                "rotation_preset": (
                    ["none", "90", "180", "270", "360"],
                    {
                        "default": "none",
                        "tooltip": "–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞.",
                    },
                ),
            },
        }

    RETURN_TYPES = ("IMAGE",)
    FUNCTION = "rotate_image"
    CATEGORY = "AGSoft/Image"
    DESCRIPTION = "–ü–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Ñ–æ–Ω–∞, –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –∏ expand. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–∞—Ç—á–µ–π."

    def rotate_image(
        self,
        image: torch.Tensor,
        angle_degrees: int,
        interpolation: str,
        background_color: str,
        expand: bool,
        rotation_preset: str = "none",
    ) -> Tuple[torch.Tensor]:
        if rotation_preset != "none":
            angle_degrees = int(rotation_preset)

        interp_mode = INTERPOLATION_MODES.get(interpolation)
        if interp_mode is None:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏: {interpolation}")

        # (B, H, W, C) ‚Üí (B, C, H, W)
        image_chw = image.permute(0, 3, 1, 2)

        fill_value: Union[None, List[float]] = None
        if background_color == "transparent":
            if image_chw.shape[1] == 3:
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª (1.0 = –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π)
                alpha = torch.ones(
                    (image_chw.shape[0], 1, image_chw.shape[2], image_chw.shape[3]),
                    dtype=image_chw.dtype,
                    device=image_chw.device,
                )
                image_chw = torch.cat([image_chw, alpha], dim=1)
        else:
            base_color = BACKGROUND_COLORS[background_color]
            num_channels = image_chw.shape[1]
            if num_channels == 4:
                # RGBA: –¥–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ñ–∞ = 1.0
                fill_value = base_color + [1.0]
            else:
                # RGB
                fill_value = base_color

        try:
            rotated_chw = TF.rotate(
                img=image_chw,
                angle=angle_degrees,
                interpolation=interp_mode,
                expand=expand,
                fill=fill_value,
            )
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

        # –û–±—Ä–∞—Ç–Ω–æ –≤ (B, H, W, C)
        rotated = rotated_chw.permute(0, 2, 3, 1)
        return (rotated,)


# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–î–´ ===
NODE_CLASS_MAPPINGS = {
    "AGSoft_Image_Rotate": AGSoft_Image_Rotate,
}

NODE_DISPLAY_NAME_MAPPINGS = {
    "AGSoft_Image_Rotate": "AGSoft Image Rotate üîÑ",
}